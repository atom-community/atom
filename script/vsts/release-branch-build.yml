trigger:
  - master
  - 1.* # VSTS only supports wildcards at the end
  - electron-*
pr: none # no PR triggers

# workaround for https://bit.ly/2CK8itc
variables:
  _ATOM_RELEASES_S3_KEY:  $[ variables.ATOM_RELEASES_S3_KEY ]
  _ATOM_RELEASES_S3_SECRET:  $[ variables.ATOM_RELEASES_S3_SECRET ]
  _ATOM_RELEASES_S3_BUCKET: $[ variables.ATOM_RELEASES_S3_BUCKET ]
  _PACKAGE_CLOUD_API_KEY: $[ variables.PACKAGE_CLOUD_API_KEY ]

jobs:
  # GetReleaseVersion
  - template: platforms/templates/get-release-version.yml

  # Import OS-specific build definitions.
  - template: platforms/windows.yml
  - template: platforms/macos.yml
  - template: platforms/linux.yml

  - job: UploadArtifacts
    pool:
      vmImage: 'ubuntu-latest'

    dependsOn:
      - GetReleaseVersion
      - Windows_Tests
      - Linux
      - macOS_tests

    variables:
      ReleaseVersion: $[ dependencies.GetReleaseVersion.outputs['Version.ReleaseVersion'] ]
      IsReleaseBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsReleaseBranch'] ]
      IsSignedZipBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsSignedZipBranch'] ]

    steps:
      - template: platforms/templates/preparation.yml

      - task: DownloadBuildArtifacts@0
        inputs:
          itemPattern: '**'
          downloadType: 'specific'
        displayName: Download Release Artifacts

      - script: |
          node $(Build.SourcesDirectory)/script/vsts/upload-artifacts.js --create-github-release --assets-path "$(System.ArtifactsDirectory)" --linux-repo-name "atom-staging"
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          ATOM_RELEASE_VERSION: $(ReleaseVersion)
          ATOM_RELEASES_S3_KEY: $(_ATOM_RELEASES_S3_KEY)
          ATOM_RELEASES_S3_SECRET: $(_ATOM_RELEASES_S3_SECRET)
          ATOM_RELEASES_S3_BUCKET: $(_ATOM_RELEASES_S3_BUCKET)
          PACKAGE_CLOUD_API_KEY: $(_PACKAGE_CLOUD_API_KEY)
        displayName: Create Draft Release
        condition: and(succeeded(), eq(variables['Atom.AutoDraftRelease'], 'true'), eq(variables['IsReleaseBranch'], 'true'))

      - script: |
          node $(Build.SourcesDirectory)/script/vsts/upload-artifacts.js --assets-path "$(System.ArtifactsDirectory)" --s3-path "vsts-artifacts/$(Build.BuildId)/"
        env:
          ATOM_RELEASE_VERSION: $(ReleaseVersion)
          ATOM_RELEASES_S3_KEY: $(_ATOM_RELEASES_S3_KEY)
          ATOM_RELEASES_S3_SECRET: $(_ATOM_RELEASES_S3_SECRET)
          ATOM_RELEASES_S3_BUCKET: $(_ATOM_RELEASES_S3_BUCKET)
        displayName: Upload CI Artifacts to S3
        condition: and(succeeded(), eq(variables['IsSignedZipBranch'], 'true'))
